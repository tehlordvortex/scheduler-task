// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "proto/schedulr.proto" (package "schedulr", syntax proto3)
// tslint:disable
import { EventService } from "./schedulr";
import type { Event } from "./schedulr";
import type { SubscribeRequest } from "./schedulr";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AppointmentService } from "./schedulr";
import type { Empty } from "../google/protobuf/empty";
import type { DeleteAppointmentRequest } from "./schedulr";
import type { GetAppointmentRequest } from "./schedulr";
import type { Appointments } from "./schedulr";
import type { ListAppointmentsRequest } from "./schedulr";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Appointment } from "./schedulr";
import type { ScheduleAppointmentRequest } from "./schedulr";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service schedulr.AppointmentService
 */
export interface IAppointmentServiceClient {
    /**
     * @generated from protobuf rpc: Schedule
     */
    schedule(input: ScheduleAppointmentRequest, options?: RpcOptions): UnaryCall<ScheduleAppointmentRequest, Appointment>;
    /**
     * @generated from protobuf rpc: List
     */
    list(input: ListAppointmentsRequest, options?: RpcOptions): UnaryCall<ListAppointmentsRequest, Appointments>;
    /**
     * @generated from protobuf rpc: Get
     */
    get(input: GetAppointmentRequest, options?: RpcOptions): UnaryCall<GetAppointmentRequest, Appointment>;
    /**
     * @generated from protobuf rpc: Delete
     */
    delete(input: DeleteAppointmentRequest, options?: RpcOptions): UnaryCall<DeleteAppointmentRequest, Empty>;
}
/**
 * @generated from protobuf service schedulr.AppointmentService
 */
export class AppointmentServiceClient implements IAppointmentServiceClient, ServiceInfo {
    typeName = AppointmentService.typeName;
    methods = AppointmentService.methods;
    options = AppointmentService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Schedule
     */
    schedule(input: ScheduleAppointmentRequest, options?: RpcOptions): UnaryCall<ScheduleAppointmentRequest, Appointment> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ScheduleAppointmentRequest, Appointment>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: List
     */
    list(input: ListAppointmentsRequest, options?: RpcOptions): UnaryCall<ListAppointmentsRequest, Appointments> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListAppointmentsRequest, Appointments>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Get
     */
    get(input: GetAppointmentRequest, options?: RpcOptions): UnaryCall<GetAppointmentRequest, Appointment> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAppointmentRequest, Appointment>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Delete
     */
    delete(input: DeleteAppointmentRequest, options?: RpcOptions): UnaryCall<DeleteAppointmentRequest, Empty> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteAppointmentRequest, Empty>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service schedulr.EventService
 */
export interface IEventServiceClient {
    /**
     * @generated from protobuf rpc: Subscribe
     */
    subscribe(input: SubscribeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeRequest, Event>;
}
/**
 * @generated from protobuf service schedulr.EventService
 */
export class EventServiceClient implements IEventServiceClient, ServiceInfo {
    typeName = EventService.typeName;
    methods = EventService.methods;
    options = EventService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Subscribe
     */
    subscribe(input: SubscribeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeRequest, Event> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeRequest, Event>("serverStreaming", this._transport, method, opt, input);
    }
}
