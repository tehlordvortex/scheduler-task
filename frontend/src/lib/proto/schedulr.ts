// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "proto/schedulr.proto" (package "schedulr", syntax proto3)
// tslint:disable
import { Empty } from "../google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../google/protobuf/duration";
import { Timestamp } from "../google/protobuf/timestamp";
/**
 * @generated from protobuf message schedulr.Appointments
 */
export interface Appointments {
    /**
     * @generated from protobuf field: repeated schedulr.Appointment appointments = 1
     */
    appointments: Appointment[];
    /**
     * @generated from protobuf field: optional string nextCursor = 2
     */
    nextCursor?: string;
}
/**
 * @generated from protobuf message schedulr.Appointment
 */
export interface Appointment {
    /**
     * @generated from protobuf field: string bookingId = 1
     */
    bookingId: string;
    /**
     * @generated from protobuf field: string title = 2
     */
    title: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp scheduledFor = 3
     */
    scheduledFor?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Duration duration = 4
     */
    duration?: Duration;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp scheduledAt = 5
     */
    scheduledAt?: Timestamp;
}
/**
 * @generated from protobuf message schedulr.ScheduleAppointmentRequest
 */
export interface ScheduleAppointmentRequest {
    /**
     * @generated from protobuf field: string title = 1
     */
    title: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp scheduledFor = 2
     */
    scheduledFor?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Duration duration = 3
     */
    duration?: Duration;
}
/**
 * @generated from protobuf message schedulr.ListAppointmentsRequest
 */
export interface ListAppointmentsRequest {
    /**
     * @generated from protobuf field: optional string cursor = 1
     */
    cursor?: string;
    /**
     * @generated from protobuf field: int32 limit = 2
     */
    limit: number;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp before = 3
     */
    before?: Timestamp;
    /**
     * @generated from protobuf field: optional google.protobuf.Timestamp after = 4
     */
    after?: Timestamp;
}
/**
 * @generated from protobuf message schedulr.GetAppointmentRequest
 */
export interface GetAppointmentRequest {
    /**
     * @generated from protobuf field: string bookingId = 1
     */
    bookingId: string;
}
/**
 * @generated from protobuf message schedulr.DeleteAppointmentRequest
 */
export interface DeleteAppointmentRequest {
    /**
     * @generated from protobuf field: string bookingId = 1
     */
    bookingId: string;
}
/**
 * @generated from protobuf message schedulr.SubscribeRequest
 */
export interface SubscribeRequest {
}
/**
 * @generated from protobuf message schedulr.Event
 */
export interface Event {
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "bookingChanged";
        /**
         * @generated from protobuf field: schedulr.BookingChangedEvent bookingChanged = 1
         */
        bookingChanged: BookingChangedEvent;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message schedulr.BookingChangedEvent
 */
export interface BookingChangedEvent {
}
// @generated message type with reflection information, may provide speed optimized methods
class Appointments$Type extends MessageType<Appointments> {
    constructor() {
        super("schedulr.Appointments", [
            { no: 1, name: "appointments", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Appointment },
            { no: 2, name: "nextCursor", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Appointments>): Appointments {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appointments = [];
        if (value !== undefined)
            reflectionMergePartial<Appointments>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Appointments): Appointments {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated schedulr.Appointment appointments */ 1:
                    message.appointments.push(Appointment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional string nextCursor */ 2:
                    message.nextCursor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Appointments, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated schedulr.Appointment appointments = 1; */
        for (let i = 0; i < message.appointments.length; i++)
            Appointment.internalBinaryWrite(message.appointments[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional string nextCursor = 2; */
        if (message.nextCursor !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.nextCursor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message schedulr.Appointments
 */
export const Appointments = new Appointments$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Appointment$Type extends MessageType<Appointment> {
    constructor() {
        super("schedulr.Appointment", [
            { no: 1, name: "bookingId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "scheduledFor", kind: "message", T: () => Timestamp },
            { no: 4, name: "duration", kind: "message", T: () => Duration },
            { no: 5, name: "scheduledAt", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Appointment>): Appointment {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bookingId = "";
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial<Appointment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Appointment): Appointment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string bookingId */ 1:
                    message.bookingId = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* google.protobuf.Timestamp scheduledFor */ 3:
                    message.scheduledFor = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.scheduledFor);
                    break;
                case /* google.protobuf.Duration duration */ 4:
                    message.duration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.duration);
                    break;
                case /* google.protobuf.Timestamp scheduledAt */ 5:
                    message.scheduledAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.scheduledAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Appointment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string bookingId = 1; */
        if (message.bookingId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.bookingId);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* google.protobuf.Timestamp scheduledFor = 3; */
        if (message.scheduledFor)
            Timestamp.internalBinaryWrite(message.scheduledFor, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration duration = 4; */
        if (message.duration)
            Duration.internalBinaryWrite(message.duration, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp scheduledAt = 5; */
        if (message.scheduledAt)
            Timestamp.internalBinaryWrite(message.scheduledAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message schedulr.Appointment
 */
export const Appointment = new Appointment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScheduleAppointmentRequest$Type extends MessageType<ScheduleAppointmentRequest> {
    constructor() {
        super("schedulr.ScheduleAppointmentRequest", [
            { no: 1, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "scheduledFor", kind: "message", T: () => Timestamp },
            { no: 3, name: "duration", kind: "message", T: () => Duration }
        ]);
    }
    create(value?: PartialMessage<ScheduleAppointmentRequest>): ScheduleAppointmentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial<ScheduleAppointmentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScheduleAppointmentRequest): ScheduleAppointmentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string title */ 1:
                    message.title = reader.string();
                    break;
                case /* google.protobuf.Timestamp scheduledFor */ 2:
                    message.scheduledFor = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.scheduledFor);
                    break;
                case /* google.protobuf.Duration duration */ 3:
                    message.duration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.duration);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScheduleAppointmentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string title = 1; */
        if (message.title !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.title);
        /* google.protobuf.Timestamp scheduledFor = 2; */
        if (message.scheduledFor)
            Timestamp.internalBinaryWrite(message.scheduledFor, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration duration = 3; */
        if (message.duration)
            Duration.internalBinaryWrite(message.duration, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message schedulr.ScheduleAppointmentRequest
 */
export const ScheduleAppointmentRequest = new ScheduleAppointmentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAppointmentsRequest$Type extends MessageType<ListAppointmentsRequest> {
    constructor() {
        super("schedulr.ListAppointmentsRequest", [
            { no: 1, name: "cursor", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "before", kind: "message", T: () => Timestamp },
            { no: 4, name: "after", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<ListAppointmentsRequest>): ListAppointmentsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.limit = 0;
        if (value !== undefined)
            reflectionMergePartial<ListAppointmentsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAppointmentsRequest): ListAppointmentsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string cursor */ 1:
                    message.cursor = reader.string();
                    break;
                case /* int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                case /* optional google.protobuf.Timestamp before */ 3:
                    message.before = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.before);
                    break;
                case /* optional google.protobuf.Timestamp after */ 4:
                    message.after = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.after);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAppointmentsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string cursor = 1; */
        if (message.cursor !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.cursor);
        /* int32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).int32(message.limit);
        /* optional google.protobuf.Timestamp before = 3; */
        if (message.before)
            Timestamp.internalBinaryWrite(message.before, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Timestamp after = 4; */
        if (message.after)
            Timestamp.internalBinaryWrite(message.after, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message schedulr.ListAppointmentsRequest
 */
export const ListAppointmentsRequest = new ListAppointmentsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAppointmentRequest$Type extends MessageType<GetAppointmentRequest> {
    constructor() {
        super("schedulr.GetAppointmentRequest", [
            { no: 1, name: "bookingId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetAppointmentRequest>): GetAppointmentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bookingId = "";
        if (value !== undefined)
            reflectionMergePartial<GetAppointmentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAppointmentRequest): GetAppointmentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string bookingId */ 1:
                    message.bookingId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAppointmentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string bookingId = 1; */
        if (message.bookingId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.bookingId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message schedulr.GetAppointmentRequest
 */
export const GetAppointmentRequest = new GetAppointmentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteAppointmentRequest$Type extends MessageType<DeleteAppointmentRequest> {
    constructor() {
        super("schedulr.DeleteAppointmentRequest", [
            { no: 1, name: "bookingId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteAppointmentRequest>): DeleteAppointmentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bookingId = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteAppointmentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteAppointmentRequest): DeleteAppointmentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string bookingId */ 1:
                    message.bookingId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteAppointmentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string bookingId = 1; */
        if (message.bookingId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.bookingId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message schedulr.DeleteAppointmentRequest
 */
export const DeleteAppointmentRequest = new DeleteAppointmentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeRequest$Type extends MessageType<SubscribeRequest> {
    constructor() {
        super("schedulr.SubscribeRequest", []);
    }
    create(value?: PartialMessage<SubscribeRequest>): SubscribeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscribeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeRequest): SubscribeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscribeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message schedulr.SubscribeRequest
 */
export const SubscribeRequest = new SubscribeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event$Type extends MessageType<Event> {
    constructor() {
        super("schedulr.Event", [
            { no: 1, name: "bookingChanged", kind: "message", oneof: "data", T: () => BookingChangedEvent }
        ]);
    }
    create(value?: PartialMessage<Event>): Event {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Event>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event): Event {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* schedulr.BookingChangedEvent bookingChanged */ 1:
                    message.data = {
                        oneofKind: "bookingChanged",
                        bookingChanged: BookingChangedEvent.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).bookingChanged)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Event, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* schedulr.BookingChangedEvent bookingChanged = 1; */
        if (message.data.oneofKind === "bookingChanged")
            BookingChangedEvent.internalBinaryWrite(message.data.bookingChanged, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message schedulr.Event
 */
export const Event = new Event$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BookingChangedEvent$Type extends MessageType<BookingChangedEvent> {
    constructor() {
        super("schedulr.BookingChangedEvent", []);
    }
    create(value?: PartialMessage<BookingChangedEvent>): BookingChangedEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<BookingChangedEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BookingChangedEvent): BookingChangedEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BookingChangedEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message schedulr.BookingChangedEvent
 */
export const BookingChangedEvent = new BookingChangedEvent$Type();
/**
 * @generated ServiceType for protobuf service schedulr.AppointmentService
 */
export const AppointmentService = new ServiceType("schedulr.AppointmentService", [
    { name: "Schedule", options: {}, I: ScheduleAppointmentRequest, O: Appointment },
    { name: "List", options: {}, I: ListAppointmentsRequest, O: Appointments },
    { name: "Get", options: {}, I: GetAppointmentRequest, O: Appointment },
    { name: "Delete", options: {}, I: DeleteAppointmentRequest, O: Empty }
]);
/**
 * @generated ServiceType for protobuf service schedulr.EventService
 */
export const EventService = new ServiceType("schedulr.EventService", [
    { name: "Subscribe", serverStreaming: true, options: {}, I: SubscribeRequest, O: Event }
]);
