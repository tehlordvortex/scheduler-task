// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const deleteBookingById = `-- name: DeleteBookingById :exec
update booking set deleted_at = now() where id = $1 and deleted_at is null
`

func (q *Queries) DeleteBookingById(ctx context.Context, id ID) error {
	_, err := q.db.Exec(ctx, deleteBookingById, id)
	return err
}

const getBookingById = `-- name: GetBookingById :one
select id, title, scheduled_for, ends_at, created_at, updated_at, deleted_at from booking where id = $1 and deleted_at is null limit 1
`

func (q *Queries) GetBookingById(ctx context.Context, id ID) (BookingModel, error) {
	row := q.db.QueryRow(ctx, getBookingById, id)
	var i BookingModel
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ScheduledFor,
		&i.EndsAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const insertBooking = `-- name: InsertBooking :one
insert into booking
  ("title", "scheduled_for", "ends_at")
values
  ($1, $2, $3)
returning id, title, scheduled_for, ends_at, created_at, updated_at, deleted_at
`

type InsertBookingParams struct {
	Title        string
	ScheduledFor time.Time
	EndsAt       time.Time
}

func (q *Queries) InsertBooking(ctx context.Context, arg InsertBookingParams) (BookingModel, error) {
	row := q.db.QueryRow(ctx, insertBooking, arg.Title, arg.ScheduledFor, arg.EndsAt)
	var i BookingModel
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ScheduledFor,
		&i.EndsAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listBookings = `-- name: ListBookings :many
select id, title, scheduled_for, ends_at, created_at, updated_at, deleted_at from booking where
  deleted_at is null
  and (scheduled_for > $1::timestamptz or $1 is null)
  and (ends_at <= $2::timestamptz or $2::timestamptz is null)
  and (scheduled_for >= $3::timestamptz or $3::timestamptz is null)
order by scheduled_for asc limit $4
`

type ListBookingsParams struct {
	Cursor *time.Time
	Before *time.Time
	After  *time.Time
	Max    int32
}

func (q *Queries) ListBookings(ctx context.Context, arg ListBookingsParams) ([]BookingModel, error) {
	rows, err := q.db.Query(ctx, listBookings,
		arg.Cursor,
		arg.Before,
		arg.After,
		arg.Max,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BookingModel
	for rows.Next() {
		var i BookingModel
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ScheduledFor,
			&i.EndsAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
